const TelegramApi = require('node-telegram-bot-api');
const cron = require('node-cron');

const TOKEN = '6421481723:AAGecmtKjMac1rE9aRD9F3gfuOJ0hc28bsk';

const bot = new TelegramApi(TOKEN, { polling: true });

let notification = null;

let isNotification = false;
let currentChatId = '';
let currentData = [];

const dailyNotification = (chatId, data) => {
	//–§—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	const dailyChatId = chatId;
	const dailyData = data;

	return cron.schedule('00 11 * * *', () => {
		const user = dailyData[Math.floor(Math.random() * dailyData.length)];
		bot.sendMessage(
			dailyChatId,
			`üéâ ${user.name} —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ üéâ, –∑–∞–ø–∏—Å—ã–≤–∞–π –∫—Ä—É–∂–æ–∫ ‚≠ï @${user.username}`
		);
	});
};

bot.setMyCommands([
	{
		command: '/start',
		description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
	},
	{
		command: '/whatismyname',
		description: '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç',
	},
	{
		command: '/ontimetotalk',
		description: '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–∂–∫–µ',
	},
	{
		command: '/offtimetotalk',
		description: '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–∂–∫–µ',
	},
]);

bot.on('message', async (msg) => {
	const text = msg.text;
	const chatId = msg.chat.id;
	const name = msg.from.first_name;
	const username = msg.from.username;

	console.log(username);

	const getUsers = new Promise(function (resolve, reject) {
		//–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ –∫—Ä–æ–º–µ –±–æ—Ç–æ–≤
		const users = [];
		if (/^-/.test(chatId)) {
			bot.getChatAdministrators(chatId)
				.then((data) => {
					data.forEach((item) => {
						if (item.user.is_bot === false)
							users.push({
								name: item.user.first_name,
								username: item.user.username
							});
					});
				})
				.then(() => {
					resolve(users);
				});
		} else {
			return resolve(users);
		}
	});

	if (text === '/start' || text === '/start@the_gnzd_bot') {
		return bot.sendMessage(chatId, `–ó–¥–∞—Ä–æ–≤–∞, —Ç—ã –ø–æ–ø–∞–ª –∫ –±–æ—Ç—É –±–∞–Ω–¥—ã GNZD`);
	}
	if (text === '/whatismyname' || text === '/whatismyname@the_gnzd_bot') {
		return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${name} üéâ`);
	}
	if (text === '/ontimetotalk' ||
		text === '/ontimetotalk@the_gnzd_bot' ||
		text === '/offtimetotalk' ||
		text === '/offtimetotalk@the_gnzd_bot') {
		if (/^-/.test(chatId) !== true) {
			//–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–æ —á–∞—Ç –∏–ª–∏ –Ω–µ—Ç
			bot.sendMessage(
				chatId,
				'–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö'
			);
		} else {
			if (text === '/ontimetotalk' ||
				text === '/ontimetotalk@the_gnzd_bot') {
				//–í–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
				if (isNotification === false) {
					isNotification = true;
					getUsers.then((data) => {
						currentChatId = chatId;
						currentData = data;
					}).then(() => {
						notification = dailyNotification(currentChatId, currentData);
					}).then(() => {
						notification.start();
						bot.sendMessage(
							chatId,
							'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ'
						);
					});
				} else {
					bot.sendMessage(
						chatId,
						'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ'
					);
				}
			} else if (text === '/offtimetotalk' ||
				text === '/offtimetotalk@the_gnzd_bot') {
				//–û—Ç–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
				if (isNotification === true) {
					isNotification = false;
					notification.stop();
					bot.sendMessage(
						chatId,
						'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'
					);
				} else {
					bot.sendMessage(
						chatId,
						'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'
					);
				}
			}
		}
	}
});